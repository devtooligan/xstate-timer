{"id":"node_modules/@xstate/immer/lib/index.js","dependencies":[{"name":"/Users/lcvista/dev/xstate-timer/package.json","includedInParent":true,"mtime":1602002238198},{"name":"/Users/lcvista/dev/xstate-timer/node_modules/@xstate/immer/package.json","includedInParent":true,"mtime":1602002163073},{"name":"xstate","loc":{"line":3,"column":23},"parent":"/Users/lcvista/dev/xstate-timer/node_modules/@xstate/immer/lib/index.js","resolved":"/Users/lcvista/dev/xstate-timer/node_modules/xstate/es/index.js"},{"name":"immer","loc":{"line":4,"column":22},"parent":"/Users/lcvista/dev/xstate-timer/node_modules/@xstate/immer/lib/index.js","resolved":"/Users/lcvista/dev/xstate-timer/node_modules/immer/dist/immer.esm.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xstate_1 = require(\"xstate\");\nvar immer_1 = require(\"immer\");\nfunction immerAssign(recipe) {\n    return xstate_1.assign(function (context, event, meta) {\n        return immer_1.produce(context, function (draft) { return void recipe(draft, event, meta); });\n    });\n}\nexports.assign = immerAssign;\nfunction createUpdater(type, recipe) {\n    var update = function (input) {\n        return {\n            type: type,\n            input: input\n        };\n    };\n    return {\n        update: update,\n        action: immerAssign(function (ctx, event, meta) {\n            recipe(ctx, event, meta);\n        }),\n        type: type\n    };\n}\nexports.createUpdater = createUpdater;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@xstate/immer/lib/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/@xstate/immer/lib/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xstate_1 = require(\"xstate\");\nvar immer_1 = require(\"immer\");\nfunction immerAssign(recipe) {\n    return xstate_1.assign(function (context, event, meta) {\n        return immer_1.produce(context, function (draft) { return void recipe(draft, event, meta); });\n    });\n}\nexports.assign = immerAssign;\nfunction createUpdater(type, recipe) {\n    var update = function (input) {\n        return {\n            type: type,\n            input: input\n        };\n    };\n    return {\n        update: update,\n        action: immerAssign(function (ctx, event, meta) {\n            recipe(ctx, event, meta);\n        }),\n        type: type\n    };\n}\nexports.createUpdater = createUpdater;\n"},"lineCount":27}},"error":null,"hash":"e7368d519dddac9b77a3ea96e07ccc4e","cacheData":{"env":{}}}